<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans          
    http://www.springframework.org/schema/beans/spring-beans.xsd          
    http://www.springframework.org/schema/security          
    http://www.springframework.org/schema/security/spring-security.xsd">
    
   
   <!-- 放行的规则配置 必须放在最前面 -->
    <security:http pattern="/login.jsp" security="none"></security:http>
    <security:http pattern="/error.jsp" security="none"></security:http>
    <security:http pattern="/css/**" security="none"></security:http>
    <security:http pattern="/img/**" security="none"></security:http>
    <security:http pattern="/pages/**" security="none"></security:http>
    <security:http pattern="/plugins/**" security="none"></security:http>
  
<!-- 针对请求的规则配置
auto-config  框架提示的默认配置
use-expressions 框架使用spel表达式关闭
-->
<security:http auto-config="true" use-expressions="true">
	<!-- 拦截的请求规则
	pattern 表示拦截所有的请求
	access 属性表示 允许访问需要的权限
	支持多个角色的登陆认证 是或者的关系 只要匹配任意一个权限 即可登陆
	使用spel表达式 haSRole('ROLE_ADMIN') or hasRole('ROLE_USER')
	              hasAnyRole('ROLE_ADMIN','ROLE_USER')
	              ROLE_USER,ROLE_ADMIN,ROLE_ORDER,ROLE_PRODUCT
	 -->
	<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN','ROLE_USER','ROLE_ORDER','ROLE_PRODUCT')"/>
	<!-- 自定义页面应用的form表单登录配置
	login-page 登录页面
	default-target-url 登录成功的页面
	authentication-failure-url 登录失败的页面
	login-processing-url 登录请求的url路径
	 -->
	<security:form-login login-page="/login.jsp"
	                     default-target-url="/index.jsp"
	                     authentication-failure-url="/error.jsp"
	                     login-processing-url="/login"/>
	<!-- 权限不足的处理 -->
	<security:access-denied-handler error-page="/403.jsp"/>
	<!-- 关闭跨域请求 -->
	<security:csrf disabled="true"/>
	
	<!-- 注销请求的配置节点
	logout-url 页面发起请求退出的url路径
	logout-success-url 成功注销后的跳转页面
	invalidate-session 销毁session
	 -->
	<security:logout invalidate-session="true"
	                 logout-success-url="/login.jsp" 
	                 logout-url="/logout"/>
	
</security:http>
<!-- 认证权限的管理节点 -->
<security:authentication-manager>
	<!-- 引入用户自定义的user实现类做用户的验证
	  userService 接口需要继承框架的userDetailsService 接口
	  目的是实现接口的loadUserByName方法
	 -->
	<security:authentication-provider user-service-ref="userService">
		<!-- 目前两种方式都可以
		ref好处在于可以使用其余的加密工具类 通过id引入过来
		<security:password-encoder ref="pwdEncoder"></security:password-encoder>
		 -->
		
		<security:password-encoder hash="bcrypt"></security:password-encoder>
	</security:authentication-provider>
</security:authentication-manager>

 	<bean id="pwdEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
 	
 
</beans>


